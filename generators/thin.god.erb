# == God config file for thin
#
# http://god.rubyforge.org/
# Authors: Gump and michael@glauche.de
# https://github.com/macournoyer/thin/blob/master/example/thin.god
#
# Modified by Romain Champourlier (romain@softr.li)
# 
# God config file generator for thin to be used with Capistrano to deploy apps
# with God monitoring.
#

require 'yaml'

file = "<%= thin_config %>"
LOG_DIR = "<%= log_path %>"

config = YAML.load_file(file)
num_servers = config["servers"] ||= 1

(0...num_servers).each do |index|
  # UNIX socket cluster use number 0 to 2 (for 3 servers)
  # and tcp cluster use port number 3000 to 3002.
  number = config['socket'] ? index : (config['port'] + index)

  God.watch do |w|
    w.dir = "<%= current_path %>"
  
    w.group = "<%= application %>"
    w.name = w.group + "-thin-#{number}"
  
    w.interval = 30.seconds
  
    # Don't use uid/gid when running god as non-root
    #w.uid = config["user"]
    #w.gid = config["group"]
  
    w.start = "bundle exec thin start -C #{file} -o #{number}"
    w.start_grace = 10.seconds
  
    w.stop = "bundle exec thin stop -C #{file} -o #{number}"
    w.stop_grace = 10.seconds
  
    w.restart = "bundle exec thin restart -C #{file} -o #{number}"

    pid_path = config["pid"]
    ext = File.extname(pid_path)

    w.log = "#{LOG_DIR}/god_thin.#{number}.log" 
    w.pid_file = pid_path.gsub(/#{ext}$/, ".#{number}#{ext}")
  
    w.behavior(:clean_pid_file)

    w.start_if do |start|
      start.condition(:process_running) do |c|
        c.interval = 5.seconds
        c.running = false
      end
    end

    w.restart_if do |restart|
      restart.condition(:memory_usage) do |c|
        c.above = 150.megabytes
        c.times = [3,5] # 3 out of 5 intervals
      end

      restart.condition(:cpu_usage) do |c|
        c.above = 50.percent
        c.times = 5
      end
    end

    w.lifecycle do |on|
      on.condition(:flapping) do |c|
        c.to_state = [:start, :restart]
        c.times = 5
        c.within = 5.minutes
        c.transition = :unmonitored
        c.retry_in = 10.minutes
        c.retry_times = 5
        c.retry_within = 2.hours
      end
    end
  end
end