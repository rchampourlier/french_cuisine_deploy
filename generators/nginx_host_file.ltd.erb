# nginx configuration file for Rails app
# ERB generator to be used from Capistrano recipes
#
# Can be used with thin or unicorn Rails app servers
#
# References
#  - https://github.com/ricodigo/ricodigo-capistrano-recipes/blob/master/generators/nginx.conf.erb

upstream <%= application %>_app_server {
  <% if app_server == :unicorn %>
    server unix://<%= unicorn_socket %> fail_timeout=0;
  <% end %>
  <% if app_server == :thin %>
    <% workers.times do |n| %>
      <% socket = "#{thin_socket.match(%r%.*thin%).to_s}.#{n}#{thin_socket.match(%r%.*thin%).post_match}"%>
      server unix:<%= socket %> fail_timeout=0;
    <% end %>
  <% end %>
}

<% ([:main] + (app_uses_ssl ? [:ssl] : [])).each do |server| %>

# <%= application %> Server
server {

  listen <%= server == :ssl ? app_port_ssl : app_port %>;
  client_max_body_size 500M;
  server_name <%= server_name %>;

  <% if server == :ssl %>
  ssl                     on;
  ssl_certificate         /etc/ssl/certs/<%= application %>.crt;
  ssl_certificate_key     /etc/ssl/private/<%= application %>.key;
  ssl_session_timeout     5m;
  <% end %>
  
  #rewrite_log on;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 5;

  # path for static files
  root <%= deploy_to %>/current/public;
  
  # Logs
  access_log <%= log_path %>/nginx<%= server == :ssl ? '.ssl' : '' %>.access.log;
  error_log  <%= log_path %>/nginx<%= server == :ssl ? '.ssl' : '' %>.error.log;

  # With try_files, $uri is the right keyword to use. $request_filename
  # will not work.
  #
  location / {
    # Returns file if it exists, else send to app server's location
    try_files $uri @app_server;
  }

  # location @app_server
  # Proxy to Rails app server
  #
  location @app_server {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_pass http://<%= application %>_app_server;
    
    <% if server == :ssl %>
    proxy_set_header X-Forwarded-Proto https;
    proxy_redirect off;
    proxy_max_temp_file_size 0;
    <% end %>
  }

  # Locations matching /system and /assets
  # /system currently used for qrcodes, avatars
  # /assets used for Jammit generated assets (css, js)
  #
  # current/public/system should be symlinked to shared/system to
  # keep system content throughout new releases
  #
  # Tries to get the file locally. If not found, proxies to @app_server
  # location
  #
  location ^~ /system/ {
    try_files $uri @app_server;
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    break;
  }
  location ^~ /assets/ {
    try_files $uri @app_server;
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    break;
  }

  # This block will catch static file requests, such as images, css, js
	# The ?: prefix is a 'non-capturing' mark, meaning we do not require
	# the pattern to be captured into $1 which should help improve performance
  # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
  # BUT there's a chance it could break the ajax calls.
  #
  location ~* \.(?:ico|gif|jpe?g|png)(\?[0-9]+)?$ {
     # Some basic cache-control for static files to be sent to the browser
     expires max;
     add_header Pragma public;
     add_header Cache-Control "public, must-revalidate, proxy-revalidate";
     break;
  }

	location = /robots.txt  { access_log off; log_not_found off; }
	location = /favicon.ico { access_log off; log_not_found off; }	

	# This prevents hidden files (beginning with a period) from being served
	location ~ /\.          { access_log off; log_not_found off; deny all; }

  # Maintenance and error pages
  
  # Rails error pages
  error_page 500 502 504 /500.html;
  location = /500.html {
    root <%= deploy_to %>/current/public;
  }
  
  # Maintenance management
  #
  # If the maintenance file is present, returns a 503 temporary unavailable error, which
  # will display the maintenance file thanks to the error_page directive
  #
  if (-f <%= maintenance_page_path %>) {
    return 503;
  }
  
  # Maintenance error page
  location @error503 {
    return 503;
  }
  error_page 503 @maintenance;
  location @maintenance {
    root <%= deploy_to %>/shared/system;
    rewrite ^(.*)$ /maintenance.html break;
  }
}

<% end %> 